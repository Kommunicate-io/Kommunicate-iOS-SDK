default_platform(:ios)

platform :ios do
  desc "Release new version"
  lane :release do
	  releaseBranchName = git_branch

    unless releaseBranchName.partition('/').first == "release"
      raise "Incorrect branch, expected release branch".red
    end

    sh("git", "fetch")
    sh("git", "checkout", releaseBranchName)

    version = releaseBranchName.partition('/').last
    version_bump_podspec(path: "Kommunicate.podspec", version_number: version)
    cocoapods(clean_install: true, podfile: "Example/Podfile", repo_update: true)

    pod_lib_lint
    update_changelog_tag(version: version)
    push_version_update(version: version, releaseBranchName: releaseBranchName)

    pod_push
    release_docs(version: version)
  end

  desc "Create release draft"
  lane :release_docs do |options|
    version = options[:version]
    changelog = read_changelog(
      section_identifier: "[version]" # replace with version var
    )
    set_github_release(
      repository_name: "Kommunicate-io/Kommunicate-iOS-SDK",
      api_token: ENV["DANGER_GITHUB_API_TOKEN"],
      name: version,
      tag_name: version,
      description: (changelog rescue "No changelog provided"),
      is_draft: "true"
    )
  end

  desc "Update changelog"
  lane :update_changelog_tag do |options|
    version = options[:version]
    stamp_changelog(
      section_identifier: version,
      git_tag: version,
      should_stamp_date: "true"
    )
  end

  desc "Commit and push changes"
  lane :push_version_update do |options|
    version = options[:version]
    releaseBranchName = options[:releaseBranchName]
    sh("git", "add", "-u")
    sh("git", "commit", "-m", "Bump version to #{version} [ci skip]")
    sh("git", "fetch", "origin", "master")
    sh("git", "branch", "master", "origin/master")
    sh("git", "fetch", ".", "#{releaseBranchName}:master")
    sh("git", "checkout", "master")
    sh("git", "tag", version)
    sh("git", "fetch", "origin", "dev")
    sh("git", "branch", "dev", "origin/dev")
    sh("git", "fetch", ".", "master:dev")
    sh("git", "checkout", "dev")
    sh("git", "push", "origin", "--tags", "master")
    sh("git", "push", "origin", "dev")
  end

  desc "Bump ApplozicSwift version"
  lane :applozicswift_version_update do |options|
    depUpdateBranchName = git_branch
    unless depUpdateBranchName.partition('/').first == "als-dep-update"
      raise "Incorrect branch, expected als-dep-update branch".red
    end
    sh("git", "fetch")
    sh("git", "checkout", depUpdateBranchName)

    version = depUpdateBranchName.partition('/').last
    dependency = "ApplozicSwift"
    change_podspec_dependency_version(
      podspec: "Kommunicate.podspec",
      dependency: dependency,
      version: "~> #{version}"
    )
    sh("cd ../Example && pod update #{dependency}")
    push_dependecy_update(version: version, depUpdateBranchName: depUpdateBranchName, dependency: dependency)

    create_pull_request(
      api_token: ENV["DANGER_GITHUB_API_TOKEN"],
      repo: "Kommunicate-io/Kommunicate-iOS-SDK",
      title: "Update #{dependency} to #{version} #trivial",
      base: "dev",
      body: "✅ Updated #{dependency} to #{version}. \n✅ Updated Podfile.lock.",
      labels: "dependencies"
    )
  end

  desc "Commit and push dependency update changes"
  lane :push_dependecy_update do |options|
    version = options[:version]
    depUpdateBranchName = options[:depUpdateBranchName]
    dependency = options[:dependency]
    sh("git", "add", "-u")
    sh("git", "commit", "-m", "Bump #{dependency} to #{version} [ci skip]")
    sh("git", "fetch", "origin", "dev")
    sh("git", "rebase", "origin/dev")
    sh("git", "push", "origin", depUpdateBranchName)
  end
end
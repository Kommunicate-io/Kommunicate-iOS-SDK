name: iOS Automation Test Workflow

on:
  push:
    branches:
      - dev # Run the workflow on pushes to the dev branch
  pull_request:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    timeout-minutes: 30 # Prevents the workflow from hanging indefinitely

    steps:
      # Step 1: Checkout the code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable # Ensure this version is available on the runner

      # Step 3: Install dependencies (if using CocoaPods)
      - name: Install Dependencies
        run: |
          pod install --project-directory=Example

      # Step 4: Install Certificates and Provisioning Profiles
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -x # Enable debug logging
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create and configure keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Step 5: Update Info.plist Files with Secrets
      - name: Update Info.plist in Example
        run: |
          PLIST_PATH="Example/Kommunicate/Info.plist"
          KEY="KOMMUNICATE_APP_ID"
          VALUE="${{ secrets.KOMMUNICATE_APP_ID }}"
          /usr/libexec/PlistBuddy -c "Set :$KEY $VALUE" "$PLIST_PATH" || \
          /usr/libexec/PlistBuddy -c "Add :$KEY string $VALUE" "$PLIST_PATH"
          cat "$PLIST_PATH"

      - name: Update Info.plist in Tests
        run: |
          PLIST_PATH="Example/Tests/Info.plist"
          KEY="KOMMUNICATE_APP_ID"
          VALUE="${{ secrets.KOMMUNICATE_APP_ID }}"
          /usr/libexec/PlistBuddy -c "Set :$KEY $VALUE" "$PLIST_PATH" || \
          /usr/libexec/PlistBuddy -c "Add :$KEY string $VALUE" "$PLIST_PATH"
          cat "$PLIST_PATH"

      - name: Update Info.plist in UI Tests
        run: |
          PLIST_PATH="Example/Kommunicate_ExampleUITests/Info.plist"
          KEY="KOMMUNICATE_APP_ID"
          VALUE="${{ secrets.KOMMUNICATE_APP_ID }}"
          /usr/libexec/PlistBuddy -c "Set :$KEY $VALUE" "$PLIST_PATH" || \
          /usr/libexec/PlistBuddy -c "Add :$KEY string $VALUE" "$PLIST_PATH"
          cat "$PLIST_PATH"

      # Step 6: Cache CocoaPods
      - name: Cache Pods
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      # Step 7: Run Tests
      - name: Run XCTest
        env:
          KOMMUNICATE_APP_ID: ${{ secrets.KOMMUNICATE_APP_ID }}
        run: |
          xcodebuild test \
            -workspace Example/Kommunicate.xcworkspace \
            -scheme Kommunicate_Example \
            -destination 'platform=iOS Simulator,name=iPhone 14,OS=latest' \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            -enableCodeCoverage YES \
            -derivedDataPath ./DerivedData

      # Step 8: Parse and Print Test Results
      - name: Parse Test Results
        run: |
          brew install chargepoint/xcparse/xcparse || echo "xcparse already installed"
          xcparse xcresult ./DerivedData/Logs/Test/*.xcresult ./parsed-results || echo "Failed to parse test results."

      - name: Print Test Results
        run: |
          cat ./parsed-results/TestSummaries.plist || echo "No test results found."

      # Step 9: Post Test Results as a PR Comment
      - name: Post Test Results to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './parsed-results/TestSummaries.plist';
            let content = 'Test results not found.';
            
            try {
              content = fs.readFileSync(path, 'utf8');
            } catch (err) {
              console.log('Error reading test results:', err);
            }
            
            const comment = `
              ## iOS Automation Test Results
              \`\`\`
              ${content.substring(0, 65000)} <!-- GitHub has a 65k char limit -->
              \`\`\`
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });

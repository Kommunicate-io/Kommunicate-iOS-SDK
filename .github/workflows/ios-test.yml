name: iOS Automation Test Workflow

on:
  push:
    branches:
      - dev # Run the workflow on pushes to the dev branch
  pull_request:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Xcode
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1.0' # Replace with the Xcode version you need

      # Step 3: Install dependencies (if using CocoaPods)
      - name: Install Dependencies
        run: |
          pod install --project-directory=Example

      # Step 4: Generate Temporary Entitlements
      - name: Generate Temporary Entitlements
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>keychain-access-groups</key>
            <array>
              <string>$(AppIdentifierPrefix)dummy.bundle.id</string>
            </array>
          </dict>
          </plist>' > Example/Kommunicate/Entitlements.plist

      # Step 5: Update Info.plist Files with Secrets
      - name: Append new key in info.plist in Example
        run: |
          PLIST_PATH="Example/Kommunicate/Info.plist"
          KEY="KOMMUNICATE_APP_ID"
          VALUE="${{ secrets.KOMMUNICATE_APP_ID }}"
          /usr/libexec/PlistBuddy -c "Set :$KEY $VALUE" "$PLIST_PATH" || \
          /usr/libexec/PlistBuddy -c "Add :$KEY string $VALUE" "$PLIST_PATH"
          cat "$PLIST_PATH"

      - name: Append new key in info.plist in Tests
        run: |
          PLIST_PATH="Example/Tests/Info.plist"
          KEY="KOMMUNICATE_APP_ID"
          VALUE="${{ secrets.KOMMUNICATE_APP_ID }}"
          /usr/libexec/PlistBuddy -c "Set :$KEY $VALUE" "$PLIST_PATH" || \
          /usr/libexec/PlistBuddy -c "Add :$KEY string $VALUE" "$PLIST_PATH"
          cat "$PLIST_PATH"

      - name: Append new key in info.plist in UI Tests
        run: |
          PLIST_PATH="Example/Kommunicate_ExampleUITests/Info.plist"
          KEY="KOMMUNICATE_APP_ID"
          VALUE="${{ secrets.KOMMUNICATE_APP_ID }}"
          /usr/libexec/PlistBuddy -c "Set :$KEY $VALUE" "$PLIST_PATH" || \
          /usr/libexec/PlistBuddy -c "Add :$KEY string $VALUE" "$PLIST_PATH"
          cat "$PLIST_PATH"

      # Step 6: Run Tests
      - name: Run XCTest
        env:
          KOMMUNICATE_APP_ID: ${{ secrets.KOMMUNICATE_APP_ID }}
        run: |
          xcodebuild test \
            -workspace Example/Kommunicate.xcworkspace \
            -scheme Kommunicate_Example \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.1' \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            -enableCodeCoverage YES \
            -derivedDataPath ./DerivedData

      # Step 7: Print Test Results
      - name: Print Test Results
        run: |
          cat ./DerivedData/Logs/Test/*.xcresult/TestSummaries.plist || echo "No test results found."

      # Step 8: Debug Environment Variables (Optional)
      - name: Debug Environment Variables
        run: |
          echo "Environment variables set successfully."

      # Step 9: Post Test Results as a PR Comment
      - name: Post Test Results to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './DerivedData/Logs/Test/*.xcresult/TestSummaries.plist';
            let content = 'Test results not found.';
            
            try {
              content = fs.readFileSync(path, 'utf8');
            } catch (err) {
              console.log('Error reading test results:', err);
            }
            
            const comment = `
              ## iOS Automation Test Results
              \`\`\`
              ${content.substring(0, 65000)} <!-- GitHub has a 65k char limit -->
              \`\`\`
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });
